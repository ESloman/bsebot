import json
import os
from typing import List

import discord
from discord.ext import tasks, commands

from discordbot.constants import CREATOR, HUMAN_MESSAGE_TYPES
from mongo.bsepoints import UserPoints


class EddieGainMessager(commands.Cog):
    """
    Class that exists to send the "You've gained X BSEddies" message.
    The need for this is because we need a task that can send messages.
    This task simply pulls the already calculated data out of the json file that was
    generated by a cronjob and messages the individuals. It only messages them if they have the
    "The Boys" role.
    """
    def __init__(self, bot: discord.Client, guilds, logger):
        self.bot = bot
        self.guilds = guilds
        self.logger = logger
        self.user_points = UserPoints()
        self.eddie_distributer.start()

    def cog_unload(self):
        """
        Stop task method
        :return:
        """
        self.eddie_distributer.cancel()

    @tasks.loop(minutes=10)
    async def eddie_distributer(self):
        """
        Opens up our json file of user IDS and loops over them.
        If the user IDs is in the 'The Boys' group - we message them to tell them of their
        daily BSEddies gain.
        :return:
        """
        path = os.path.join(os.path.expanduser("~"), "eddies_gained.json")
        if not os.path.exists(path):
            return

        self.logger.info("Looks like we have some salary gains to send messages about!")
        with open(path) as f:
            eddie_dict = json.load(f)  # type: dict

        guild_id = eddie_dict.pop("guild")
        guild = self.bot.get_guild(guild_id)  # type: discord.Guild

        msg = f"Eddie gain summary:\n"
        for user_id in eddie_dict:

            value = eddie_dict[user_id][0]
            breakdown = eddie_dict[user_id][1]

            if value == 0:
                continue

            try:
                user = await guild.fetch_member(int(user_id))  # type: discord.Member
            except discord.NotFound:
                msg += f"\n- `{user_id}` :  **{value}**"
                continue

            roles = user.roles  # type: List[discord.Role]

            msg += f"\n- `{user_id}` {user.display_name} :  **{value}**"
            text = f"Your daily salary of BSEDDIES is `{value}`.\n"

            text += f"\nThis is based on the following amount of interactivity yesterday:"

            for key in sorted(breakdown):
                text += f"\n - `{HUMAN_MESSAGE_TYPES[key]}`  :  **{breakdown[key]}**"

            self.logger.info(f"{user.display_name} is gaining `{value} eddies`")

            user_dict = self.user_points.find_user(int(user_id), guild_id)

            if user_dict.get("daily_eddies"):
                self.logger.info(f"Sending message to {user.display_name} for {value}")
                try:
                    await user.send(content=text)
                except discord.Forbidden:
                    continue

        user = await guild.fetch_member(CREATOR)  # type: discord.Member
        try:
            await user.send(content=msg)
        except discord.Forbidden:
            # can't send DM messages to this user
            self.logger.info(f"{user.display_name} - {msg}")

        os.remove(path)

    @eddie_distributer.before_loop
    async def before_eddie_distributer(self):
        """
        We want to make sure the websocket is connected before we start sending requests via it
        :return:
        """
        await self.bot.wait_until_ready()
