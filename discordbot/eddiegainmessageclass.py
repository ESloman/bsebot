import datetime
import json
import os
from typing import List

import discord
from discord.ext import tasks, commands

from discordbot.constants import CREATOR, BETA_USERS, THE_BOYS_ROLE
from discordbot.embedmanager import EmbedManager
from mongo.bsepoints import UserBets


class EddieGainMessager(commands.Cog):
    """
    Class that exists to send the "You've gained X BSEddies" message.
    The need for this is because we need a task that can send messages.
    This task simply pulls the already calculated data out of the json file that was
    generated by a cronjob and messages the individuals. It only messages them if they have the
    "The Boys" role.
    """
    def __init__(self, bot: discord.Client, guilds, logger):
        self.bot = bot
        self.guilds = guilds
        self.logger = logger
        self.eddie_distributer.start()

    def cog_unload(self):
        """
        Stop task method
        :return:
        """
        self.eddie_distributer.cancel()

    @tasks.loop(minutes=10)
    async def eddie_distributer(self):
        """
        Opens up our json file of user IDS and loops over them.
        If the user IDs is in the 'The Boys' group - we message them to tell them of their
        daily BSEddies gain.
        :return:
        """
        path = os.path.join(os.path.expanduser("~"), "eddies_gained.json")
        if not os.path.exists(path):
            return

        self.logger.info("Looks like we have some salary gains to send messages about!")
        with open(path) as f:
            eddie_dict = json.load(f)  # type: dict

        guild_id = eddie_dict.pop("guild")
        guild = self.bot.get_guild(guild_id)  # type: discord.Guild

        msg = f"Eddie gain summary:\n"
        for user_id in eddie_dict:
            msg += f"\n- `{user_id}`  :  **{eddie_dict[user_id]}**"

            # only message users for now
            if int(user_id) not in BETA_USERS:
                continue

            text = f"Your daily salary of BSEDDIES is `{eddie_dict[user_id]}`.\n"

            user = await guild.fetch_member(int(user_id))  # type: discord.Member
            roles = user.roles  # type: List[discord.Role]

            the_boys_role = [role for role in roles if role.id == THE_BOYS_ROLE]
            if the_boys_role:
                self.logger.info(f"Sending message to {user.display_name} for {eddie_dict[user_id]}")
                await user.send(content=text)

        user = await guild.fetch_member(CREATOR)  # type: discord.Member
        await user.send(content=msg)

        os.remove(path)

    @eddie_distributer.before_loop
    async def before_eddie_distributer(self):
        """
        We want to make sure the websocket is connected before we start sending requests via it
        :return:
        """
        await self.bot.wait_until_ready()
