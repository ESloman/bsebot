
"""
File for containing the UI modal dialogues that the bot will create
"""

import discord

from apis.github import GitHubAPI
from discordbot.slashcommandeventclasses.close import BSEddiesCloseBet
from discordbot.slashcommandeventclasses.create import BSEddiesCreateBet
from discordbot.slashcommandeventclasses.place import BSEddiesPlaceBet


class BSEddiesBetCreateModal(discord.ui.Modal):
    def __init__(self, client, guilds, logger, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.logger = logger

        self.bseddies_create = BSEddiesCreateBet(client, guilds, logger)
        self.bseddies_place = BSEddiesPlaceBet(client, guilds, logger)
        self.bseddies_close = BSEddiesCloseBet(client, guilds, logger)

        self.add_item(discord.ui.InputText(label="Bet title", placeholder="Enter your bet title here"))
        self.add_item(
            discord.ui.InputText(
                label="Enter the bet outcomes on separate lines",
                placeholder="Outcome 1...\nOutcome 2...\nOutcome 3...\nOutcome 4...\netc, etc...",
                style=discord.InputTextStyle.long
            )
        )
        self.add_item(
            discord.ui.InputText(
                label="Timeout: DIGITS + (s|m|h|d|w) (Optional)",
                required=False,
                placeholder="Examples: 25m, 2d, 8h, 6h30m, 1w3d2h, etc..."
            )
        )

    async def callback(self, interaction: discord.Interaction):
        """

        :param interaction:
        :return:
        """
        await interaction.response.defer(ephemeral=True)

        response_components = interaction.data["components"]
        bet_title_comp = response_components[0]
        bet_title = bet_title_comp["components"][0]["value"]

        bet_outcomes_comp = response_components[1]
        bet_outcomes = bet_outcomes_comp["components"][0]["value"].split("\n")

        bet_timeout_comp = response_components[2]
        bet_timeout = bet_timeout_comp["components"][0]["value"] or "20m"

        self.logger.info(f"{bet_title}, {bet_outcomes}")

        if len(bet_outcomes) > 8:
            await interaction.followup.send(
                content="You have provided too many outcomes - please provide 8 or less.",
                ephemeral=True
            )
            return

        elif len(bet_outcomes) < 2:
            await interaction.followup.send(
                content="You have provided too few outcomes - please provide at least 2.",
                ephemeral=True
            )
            return

        await self.bseddies_create.handle_bet_creation(
            interaction,
            bet_title,
            *bet_outcomes,
            timeout_str=bet_timeout.lower(),
            autogenerated=False,
            bseddies_place=self.bseddies_place,
            bseddies_close=self.bseddies_close
        )


class BSEddiesImprovementSuggest(discord.ui.Modal):
    def __init__(self, logger, github_api: GitHubAPI, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        self.logger = logger
        self.github = github_api

        self.add_item(discord.ui.InputText(label="Issue title", placeholder="Enter a summary of your issue"))
        self.add_item(
            discord.ui.InputText(
                label="Issue description",
                placeholder="Please enter a description of the issue/improvement.",
                style=discord.InputTextStyle.long
            )
        )

    async def callback(self, interaction: discord.Interaction):
        """

        :param interaction:
        :return:
        """
        await interaction.response.defer(ephemeral=True)

        response_components = interaction.data["components"]
        issue_title_comp = response_components[0]
        issue_title = issue_title_comp["components"][0]["value"]

        issue_body_comp = response_components[1]
        issue_body = issue_body_comp["components"][0]["value"]

        issue_body = f"Created by: `{interaction.user.name}`.\n\n{issue_body}"

        ret = self.github.raise_issue(
            "ESloman",
            "bsebot",
            issue_title,
            issue_body,
            "feature"
        )

        if ret.status_code != 201:
            # something went wrong
            await interaction.followup.send(
                content=f"Something went wrong raising an issue: `{ret.json()}`",
                ephemeral=True
            )
            return

        msg = f"Created an issue for you. Link: {ret.json()['url'].replace('api.', '').replace('repos/', '')}"
        await interaction.followup.send(
            content=msg,
            ephemeral=True
        )
