"""Modal classes for autogenerate."""

import discord

from mongo.bsedataclasses import AutoGeneratedBets


class AddCategory(discord.ui.Modal):
    """The AddCategory modal class."""

    def __init__(self, *args: tuple[any], **kwargs: dict[any]) -> None:
        """Initialisation method."""
        super().__init__(*args, title="Add autogenerate category", **kwargs)
        self.auto_bets = AutoGeneratedBets()

        self.category_input = discord.ui.InputText(
            label="Enter the new category name",
            placeholder="Please keep it short.",
            min_length=4,
            max_length=20,
        )

        self.add_item(self.category_input)

    async def callback(self, interaction: discord.Interaction) -> None:
        """The submit callback.

        Args:
            interaction (discord.Interaction): the interaction
        """
        category = self.category_input.value.lower()
        category = category.replace(" ", "_")
        categories = self.auto_bets.get_bet_categories()

        if category in categories:
            await interaction.response.send_message(
                content="Category already existed - nothing has changed.",
                ephemeral=True,
            )
            return

        self.auto_bets.insert_new_category(category)

        await interaction.response.send_message(content=f"Created `{category}`!", ephemeral=True, delete_after=2)


class AddBet(discord.ui.Modal):
    """The AddBet modal class."""

    def __init__(self, category: str, *args: tuple[any], **kwargs: dict[any]) -> None:
        """Initialisation method.

        Args:
            category (str): the bet category
        """
        super().__init__(*args, title="Add autogenerate category", **kwargs)
        self.auto_bets = AutoGeneratedBets()
        self.category = category

        self.title_input = discord.ui.InputText(label="Bet title", placeholder="Enter your bet title here")
        self.options = discord.ui.InputText(
            label="Enter the bet outcomes on separate lines",
            placeholder=(
                "Outcome 1...\nOutcome 2...\nOutcome 3...\nLeave empty to select options from voice channel users"
            ),
            style=discord.InputTextStyle.long,
            required=False,
        )

        self.add_item(self.title_input)
        self.add_item(self.options)

    async def callback(self, interaction: discord.Interaction) -> None:
        """The submit callback.

        Args:
            interaction (discord.Interaction): the interaction
        """
        title = self.title_input.value
        options = self.options.value

        if not options:
            options = []
        else:
            options = options.split("\n")
            if len(options) < 2:  # noqa: PLR2004
                await interaction.response.send_message(
                    content="You have provided too few outcomes - please provide at least 2.",
                    ephemeral=True,
                )
                return

        if len(options) > 8:  # noqa: PLR2004
            await interaction.response.send_message(
                content="You have provided too many outcomes - please provide at most 8.",
                ephemeral=True,
            )
            return

        self.auto_bets.insert_generated_bet(self.category, title, options)

        await interaction.response.send_message(
            content=f"Created autogenerated bet `{title}` for you.",
            ephemeral=True,
            delete_after=3,
        )
