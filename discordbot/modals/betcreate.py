"""BetCreate modal class."""

import logging

import discord

from discordbot.bsebot import BSEBot
from discordbot.slashcommandeventclasses.close import CloseBet
from discordbot.slashcommandeventclasses.create import CreateBet
from discordbot.slashcommandeventclasses.place import PlaceBet
from discordbot.utilities import PlaceHolderLogger


class BetCreateModal(discord.ui.Modal):
    """Bet create modal class."""

    def __init__(
        self,
        client: BSEBot,
        guild_ids: list[int],
        logger: logging.Logger = PlaceHolderLogger,
        *args: tuple[any],
        **kwargs: dict[any],
    ) -> None:
        """Initialisation method.

        Args:
            client (BSEBot): the connected BSEBot client
            guild_ids (list): list of supported guild IDs
            logger (logging.Logger): the logger
        """
        super().__init__(*args, **kwargs)

        self.logger = logger
        self.bseddies_create = CreateBet(client, guild_ids, logger)
        self.bseddies_place = PlaceBet(client, guild_ids, logger)
        self.bseddies_close = CloseBet(client, guild_ids, logger)

        self.add_item(discord.ui.InputText(label="Bet title", placeholder="Enter your bet title here"))
        self.add_item(
            discord.ui.InputText(
                label="Enter the bet outcomes on separate lines",
                placeholder="Outcome 1...\nOutcome 2...\nOutcome 3...\nOutcome 4...\netc, etc...",
                style=discord.InputTextStyle.long,
            ),
        )
        self.add_item(
            discord.ui.InputText(
                label="Timeout: DIGITS + (s|m|h|d|w) (Optional)",
                required=False,
                placeholder=("Examples: 30m, 8h, 1d12h, 12h30m10s, 1w3d2h, etc..."),
            ),
        )

    async def callback(self, interaction: discord.Interaction) -> None:
        """The submit callback.

        Args:
            interaction (discord.Interaction): the interaction
        """
        await interaction.response.defer(ephemeral=True)

        response_components = interaction.data["components"]
        bet_title_comp = response_components[0]
        bet_title = bet_title_comp["components"][0]["value"]

        bet_outcomes_comp = response_components[1]
        bet_outcomes = bet_outcomes_comp["components"][0]["value"].split("\n")

        bet_timeout_comp = response_components[2]
        bet_timeout = bet_timeout_comp["components"][0]["value"] or "20m"

        self.logger.info("%s, %s", bet_title, bet_outcomes)

        if len(bet_outcomes) > 8:  # noqa: PLR2004
            await interaction.followup.send(
                content="You have provided too many outcomes - please provide 8 or less.",
                ephemeral=True,
            )
            return

        if len(bet_outcomes) < 2:  # noqa: PLR2004
            await interaction.followup.send(
                content="You have provided too few outcomes - please provide at least 2.",
                ephemeral=True,
            )
            return

        await self.bseddies_create.handle_bet_creation(
            interaction,
            bet_title,
            bet_outcomes,
            timeout_str=bet_timeout.lower(),
            autogenerated=False,
            bseddies_place=self.bseddies_place,
            bseddies_close=self.bseddies_close,
        )
