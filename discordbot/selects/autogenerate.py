"""Our autogenerate selects."""

import discord
from discord import Interaction, SelectOption

from discordbot.constants import BET_TITLE_DISPLAY_LENTH
from discordbot.selects.bseselect import BSESelect
from mongo.bsedataclasses import AutoGeneratedBets


class TypeSelect(BSESelect):
    """Class for autogenerate type select."""

    def __init__(self, type_options: list[str]) -> None:
        """Initialisation method.

        Args:
            type_options (list[str]): the type select options
        """
        options = [SelectOption(label=f"{opt.title()}", value=f"{opt}") for opt in type_options]

        if len(options) == 1:
            options[0].default = True

        super().__init__(
            placeholder="Select bet type",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="bet_type_select",
        )

    async def callback(self, interaction: Interaction) -> None:
        """Select callback function.

        Args:
            interaction (Interaction): the callback's interaction
        """
        selected = interaction.data["values"][0]
        for option in self.options:
            option.default = option.value == selected.lower()
        self.view.data["type"] = selected
        await self.view.update(interaction)


class MethodSelect(BSESelect):
    """Class for autogenerate method select."""

    def __init__(self, method_options: list[str]) -> None:
        """Initialisation method.

        Args:
            method_options (list[str]): the method options
        """
        options = [
            SelectOption(label=f"{opt[0].title()}", value=f"{opt[0]}", description=f"{opt[1]}")
            for opt in method_options
        ]

        super().__init__(
            placeholder="Select generation method",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="generate_method",
        )

    async def callback(self, interaction: Interaction) -> None:
        """Select callback function.

        Args:
            interaction (Interaction): the callback's interaction
        """
        selected = interaction.data["values"][0]
        for option in self.options:
            option.default = option.value == selected
        self.view.data["method"] = selected
        await self.view.update(interaction)


class AutoBetsSelect(BSESelect):
    """Class for autogenerate bet selects."""

    def __init__(self, bet_type: str) -> None:
        """Initialisation method.

        Args:
            bet_type (str): bet type
        """
        self.auto_bets_data = AutoGeneratedBets()
        potential_bets = self.auto_bets_data.get_bets_for_type(bet_type)

        potential_bets = sorted(potential_bets, key=lambda b: b.title)

        options = []
        for bet in potential_bets:
            label = bet.title
            if len(label) > BET_TITLE_DISPLAY_LENTH:
                label = label[:99]
            value = str(bet._id)  # noqa: SLF001
            options.append(SelectOption(label=label, value=value, description=bet.title))

        max_vals = 4
        max_vals = min(len(potential_bets), max_vals)

        super().__init__(
            placeholder="Select bets to create",
            min_values=1,
            max_values=max_vals,
            options=options,
            custom_id="auto_bet_select",
        )

    async def callback(self, interaction: Interaction) -> None:
        """Select callback function.

        Args:
            interaction (Interaction): the callback's interaction
        """
        selected_vals = interaction.data["values"]
        for option in self.options:
            option.default = option.value in selected_vals

        self.view.data["_ids"] = selected_vals
        await self.view.update(interaction)


class BetsAmountSelect(BSESelect):
    """Class for autogenerate bet amount select."""

    def __init__(self) -> None:
        """Initialisation method."""
        options = [SelectOption(label=f"{x}", value=f"{x}") for x in range(1, 6)]

        super().__init__(
            placeholder="Select number of bets to generate",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="bet_amount_select",
        )

    async def callback(self, interaction: Interaction) -> None:
        """Select callback function.

        Args:
            interaction (Interaction): the callback's interaction
        """
        selected = interaction.data["values"][0]
        for option in self.options:
            option.default = option.value == selected
        self.view.data["number"] = selected
        await self.view.update(interaction)


class TimeoutSelect(BSESelect):
    """Class for autogenerate timeout select."""

    def __init__(self) -> None:
        """Initialisation method."""
        option_vals = ["5m", "10m", "15m", "20m", "25m", "30m", "45m", "60m"]
        options = [SelectOption(label=f"{x}", value=f"{x}") for x in option_vals]

        options[5].default = True

        super().__init__(
            placeholder="Select bet timeout",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="bet_timeout_select",
        )

    async def callback(self, interaction: Interaction) -> None:
        """Select callback function.

        Args:
            interaction (Interaction): the callback's interaction
        """
        selected = interaction.data["values"][0]
        for option in self.options:
            option.default = option.value == selected
        self.view.data["timeout"] = selected
        await self.view.update(interaction)


class ChannelSelect(BSESelect):
    """Class for autogenerate channel select."""

    def __init__(self) -> None:
        """Initialisation method."""
        super().__init__(
            select_type=discord.ComponentType.channel_select,
            channel_types=[discord.ChannelType.voice],
            placeholder="Select channel to fill options from...",
            min_values=1,
            max_values=1,
        )

    async def callback(self, interaction: Interaction) -> None:
        """Select callback function.

        Args:
            interaction (Interaction): the callback's interaction
        """
        selected = interaction.data["values"][0]
        for option in self.options:
            option.default = option.value == selected
        self.view.data["channel"] = selected
        await self.view.update(interaction)
