
import discord
from discord import SelectOption, Interaction

import discordbot.slashcommandeventclasses.autogenerate as autogenerate
from mongo.bsedataclasses import AutoGeneratedBets


class AutoGenerateView(discord.ui.View):

    class TypeSelect(discord.ui.Select):
        def __init__(self, type_options):
            options = [
                SelectOption(label=f"{opt.title()}", value=f"{opt}") for opt in type_options
            ]

            if len(options) == 1:
                options[0].default = True

            super().__init__(
                placeholder="Select bet type",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="bet_type_select"
            )

    class MethodSelect(discord.ui.Select):
        def __init__(self, method_options, auto: discord.ui.View):
            options = [
                SelectOption(
                    label=f"{opt[0].title()}",
                    value=f"{opt[0]}",
                    description=f"{opt[1]}"
                ) for opt in method_options
            ]

            self.auto = auto

            super().__init__(
                placeholder="Select generation method",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="generate_method"
            )

        async def callback(self, interaction: Interaction):
            selected = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected

            if selected == "random":
                for child in self.auto.children:
                    if type(child) is self.auto.AutoBetsSelect:
                        self.auto.remove_item(child)
                        break
                amount_select = self.auto.BetsAmountSelect()
                self.auto.add_item(amount_select)

                for child in self.auto.children:
                    if child.custom_id == "submit_btn":
                        child.disabled = False
                        break
            else:
                type_val = ""
                for child in self.auto.children:
                    if child.custom_id == "bet_type_select":
                        try:
                            type_val = child.values[0]
                        except (IndexError, AttributeError):
                            type_val = child.options[0].value
                        continue

                    if type(child) is self.auto.BetsAmountSelect:
                        self.auto.remove_item(child)
                        continue

                auto_select = self.auto.AutoBetsSelect(type_val, self.auto)
                self.auto.add_item(auto_select)

            await interaction.response.edit_message(view=self.auto)

    class AutoBetsSelect(discord.ui.Select):
        def __init__(self, bet_type: str, auto: discord.ui.View):
            self.auto = auto
            self.auto_bets_data = AutoGeneratedBets()
            potential_bets = self.auto_bets_data.get_bets_for_type(bet_type)

            potential_bets = sorted(potential_bets, key=lambda b: b["title"])

            options = []
            for bet in potential_bets:
                label = f"{bet['title']}"
                if len(label) > 100:
                    label = label[:99]
                value = f"{bet['_id']}"
                options.append(SelectOption(label=label, value=value, description=bet["title"]))

            max_vals = 4
            if len(potential_bets) < max_vals:
                max_vals = len(potential_bets)

            super().__init__(
                placeholder="Select bets to create",
                min_values=1,
                max_values=max_vals,
                options=options,
                custom_id="auto_bet_select"
            )

        async def callback(self, interaction: Interaction):
            selected_vals = interaction.data["values"]
            for option in self.options:
                option.default = option.value in selected_vals

            for child in self.auto.children:
                if child.custom_id == "submit_btn":
                    child.disabled = False
                    break
            await interaction.response.edit_message(view=self.auto)

    class BetsAmountSelect(discord.ui.Select):
        def __init__(self):
            options = [
                SelectOption(label=f"{x}", value=f"{x}") for x in range(1, 6)
            ]

            options[2].default = True

            super().__init__(
                placeholder="Select number of bets to generate",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="bet_amount_select"
            )

        async def callback(self, interaction: Interaction):
            selected_bet = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected_bet

            for child in self.view.children:
                if child.custom_id == "submit_btn":
                    child.disabled = False
                    break
            await interaction.response.edit_message(view=self.view)

    class TimeoutSelect(discord.ui.Select):
        def __init__(self):
            option_vals = ["5m", "10m", "15m", "20m", "25m", "30m", "45m", "60m"]
            options = [
                SelectOption(label=f"{x}", value=f"{x}") for x in option_vals
            ]

            options[5].default = True

            super().__init__(
                placeholder="Select bet timeout",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="bet_timeout_select"
            )

        async def callback(self, interaction: Interaction):
            selected_bet = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected_bet
            await interaction.response.edit_message(view=self.view)

    def __init__(
        self,
        auto_class
    ):
        super().__init__(timeout=120)

        generation_methods = [
            ("random", "Selects bets randomly"),
            ("selected", "Select the bets to create from the pool")
        ]

        self.auto_class = auto_class
        self.add_item(self.TypeSelect(["valorant"]))
        self.add_item(self.TimeoutSelect())
        method_select = self.MethodSelect(generation_methods, self)
        self.add_item(method_select)

    @discord.ui.button(label="Submit", style=discord.ButtonStyle.green, row=4, disabled=True, custom_id="submit_btn")
    async def submit_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)

        data = {"_ids": [], "number": 0, "timeout": "30m"}

        for child in self.children:
            if child.custom_id == "generate_method":
                data["method"] = child.values[0]

            elif child.custom_id == "auto_bet_select":
                data["_ids"] = child.values

            elif child.custom_id == "bet_amount_select":
                try:
                    data["number"] = child.values[0]
                except IndexError:
                    data["number"] = [opt.value for opt in child.options if opt.default is True][0]

            elif child.custom_id == "bet_timeout_select":
                try:
                    data["timeout"] = child.values[0]
                except IndexError:
                    data["timeout"] = [opt.value for opt in child.options if opt.default is True][0]

        await self.auto_class.autogenerate_wrapper(
            interaction, data["method"], data["number"], data["_ids"], data["timeout"]
        )
        await interaction.followup.edit_message(content="Bets created", view=None, message_id=interaction.message.id)

    @discord.ui.button(label="Cancel", style=discord.ButtonStyle.red, row=4, disabled=False, custom_id="cancel_btn",
                       emoji="✖️")
    async def cancel_callback(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.edit_message(content="Cancelled", view=None)
