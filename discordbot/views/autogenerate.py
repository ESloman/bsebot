"""Autogenerate views."""

import discord
from discord import Interaction, SelectOption

from discordbot.constants import BET_TITLE_DISPLAY_LENTH
from mongo.bsedataclasses import AutoGeneratedBets


class AutoGenerateView(discord.ui.View):
    """Class for Autogenerate view."""

    class TypeSelect(discord.ui.Select):
        """Class for autogenerate type select."""

        def __init__(self, type_options: list[str]) -> None:
            """Initialisation method.

            Args:
                type_options (list[str]): the type select options
            """
            options = [SelectOption(label=f"{opt.title()}", value=f"{opt}") for opt in type_options]

            if len(options) == 1:
                options[0].default = True

            super().__init__(
                placeholder="Select bet type",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="bet_type_select",
            )

        async def callback(self, interaction: Interaction) -> None:
            """Select callback function.

            Args:
                interaction (Interaction): the callback's interaction
            """
            selected = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected.lower()
            self.view.data["type"] = selected
            await self.view.update(interaction)

    class MethodSelect(discord.ui.Select):
        """Class for autogenerate method select."""

        def __init__(self, method_options: list[str]) -> None:
            """Initialisation method.

            Args:
                method_options (list[str]): the method options
            """
            options = [
                SelectOption(label=f"{opt[0].title()}", value=f"{opt[0]}", description=f"{opt[1]}")
                for opt in method_options
            ]

            super().__init__(
                placeholder="Select generation method",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="generate_method",
            )

        async def callback(self, interaction: Interaction) -> None:
            """Select callback function.

            Args:
                interaction (Interaction): the callback's interaction
            """
            selected = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected
            self.view.data["method"] = selected
            await self.view.update(interaction)

    class AutoBetsSelect(discord.ui.Select):
        """Class for autogenerate bet selects."""

        def __init__(self, bet_type: str) -> None:
            """Initialisation method.

            Args:
                bet_type (str): bet type
            """
            self.auto_bets_data = AutoGeneratedBets()
            potential_bets = self.auto_bets_data.get_bets_for_type(bet_type)

            potential_bets = sorted(potential_bets, key=lambda b: b.title)

            options = []
            for bet in potential_bets:
                label = bet.title
                if len(label) > BET_TITLE_DISPLAY_LENTH:
                    label = label[:99]
                value = str(bet._id)  # noqa: SLF001
                options.append(SelectOption(label=label, value=value, description=bet.title))

            max_vals = 4
            if len(potential_bets) < max_vals:
                max_vals = len(potential_bets)

            super().__init__(
                placeholder="Select bets to create",
                min_values=1,
                max_values=max_vals,
                options=options,
                custom_id="auto_bet_select",
            )

        async def callback(self, interaction: Interaction) -> None:
            """Select callback function.

            Args:
                interaction (Interaction): the callback's interaction
            """
            selected_vals = interaction.data["values"]
            for option in self.options:
                option.default = option.value in selected_vals

            self.view.data["_ids"] = selected_vals
            await self.view.update(interaction)

    class BetsAmountSelect(discord.ui.Select):
        """Class for autogenerate bet amount select."""

        def __init__(self) -> None:
            """Initialisation method."""
            options = [SelectOption(label=f"{x}", value=f"{x}") for x in range(1, 6)]

            super().__init__(
                placeholder="Select number of bets to generate",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="bet_amount_select",
            )

        async def callback(self, interaction: Interaction) -> None:
            """Select callback function.

            Args:
                interaction (Interaction): the callback's interaction
            """
            selected = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected
            self.view.data["number"] = selected
            await self.view.update(interaction)

    class TimeoutSelect(discord.ui.Select):
        """Class for autogenerate timeout select."""

        def __init__(self) -> None:
            """Initialisation method."""
            option_vals = ["5m", "10m", "15m", "20m", "25m", "30m", "45m", "60m"]
            options = [SelectOption(label=f"{x}", value=f"{x}") for x in option_vals]

            options[5].default = True

            super().__init__(
                placeholder="Select bet timeout",
                min_values=1,
                max_values=1,
                options=options,
                custom_id="bet_timeout_select",
            )

        async def callback(self, interaction: Interaction) -> None:
            """Select callback function.

            Args:
                interaction (Interaction): the callback's interaction
            """
            selected = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected
            self.view.data["timeout"] = selected
            await self.view.update(interaction)

    class ChanelSelect(discord.ui.Select):
        """Class for autogenerate channel select."""

        def __init__(self) -> None:
            """Initialisation method."""
            super().__init__(
                select_type=discord.ComponentType.channel_select,
                channel_types=[discord.ChannelType.voice],
                placeholder="Select channel to fill options from...",
                min_values=1,
                max_values=1,
            )

        async def callback(self, interaction: Interaction) -> None:
            """Select callback function.

            Args:
                interaction (Interaction): the callback's interaction
            """
            selected = interaction.data["values"][0]
            for option in self.options:
                option.default = option.value == selected
            self.view.data["channel"] = selected
            await self.view.update(interaction)

    def __init__(self, auto_class: object) -> None:
        """Initialisation method.

        Args:
            auto_class (_type_): _description_
        """
        super().__init__(timeout=120)
        self.auto_bets = AutoGeneratedBets()

        generation_methods = [
            ("random", "Selects bets randomly"),
            ("selected", "Select the bets to create from the pool"),
        ]

        self.selected_type = None
        self.current_page = 1
        self.data = {"_ids": [], "timeout": "30m"}
        self.auto_class = auto_class

        categories: list[str] = [cat.lower() for cat in self.auto_bets.get_bet_categories() if cat != "pook"]

        self.type_select = self.TypeSelect(categories)
        self.timeout_select = self.TimeoutSelect()
        self.channel_select = self.ChanelSelect()
        self.method_select = self.MethodSelect(generation_methods)
        self.amount_select = None
        self.bets_select = None

        self.add_item(self.type_select)
        self.add_item(self.timeout_select)
        self.add_item(self.channel_select)

    async def update(self, interaction: discord.Interaction) -> None:  # noqa: C901, PLR0912
        """View update method.

        Can be called by child types when something changes.

        Args:
            interaction (discord.Interaction): _description_
        """
        if self.current_page == 1:
            _chan = self.data.get("channel")
            _type = self.data.get("type")
            _timeout = self.data.get("timeout")

            if not _timeout:
                _timeout = next(opt.value for opt in self.timeout_select.options if opt.default is True)
                if _timeout:
                    self.data["timeout"] = _timeout

            if _chan and _type and _timeout:
                for child in self.children:
                    if child.custom_id == "submit_btn":
                        child.disabled = False
                        break

            await interaction.response.edit_message(content=interaction.message.content, view=self)

        elif self.current_page == 2:  # noqa: PLR2004
            _method = self.data.get("method")
            if _method == "random" and not self.amount_select:
                if self.bets_select:
                    self.remove_item(self.bets_select)
                    self.bets_select = None

                self.amount_select = self.BetsAmountSelect()
                self.add_item(self.amount_select)

                for child in self.children:
                    if child.custom_id == "submit_btn":
                        child.disabled = True
                        break
            elif _method == "selected" and not self.bets_select:
                if self.amount_select:
                    self.remove_item(self.amount_select)
                    self.amount_select = None

                self.bets_select = self.AutoBetsSelect(self.data["type"])
                self.add_item(self.bets_select)

                for child in self.children:
                    if child.custom_id == "submit_btn":
                        child.disabled = True
                        break
            elif _method == "random":
                _number = self.data.get("number")
                if _number:
                    for child in self.children:
                        if child.custom_id == "submit_btn":
                            child.disabled = False
                            break
            elif _method == "selected":
                _ids = self.data.get("_ids")
                if _ids:
                    for child in self.children:
                        if child.custom_id == "submit_btn":
                            child.disabled = False
                            break

            await interaction.response.edit_message(content=interaction.message.content, view=self)

    @discord.ui.button(label="Next", style=discord.ButtonStyle.green, row=4, disabled=True, custom_id="submit_btn")
    async def submit_callback(self, _: discord.ui.Button, interaction: discord.Interaction) -> None:
        """Button callback.

        Args:
            _ (discord.ui.Button): the button pressed
            interaction (discord.Interaction): the callback interaction
        """
        await interaction.response.defer(ephemeral=True)

        if self.current_page == 1:
            # first page; let's go to page 2
            for child in self.children:
                if child.custom_id == "submit_btn":
                    child.label = "Submit"
                    child.disabled = True
                    break
            self.remove_item(self.type_select)
            self.remove_item(self.timeout_select)
            self.remove_item(self.channel_select)

            # add the next stuff
            self.add_item(self.method_select)
            await interaction.followup.edit_message(
                content=interaction.message.content,
                view=self,
                message_id=interaction.message.id,
            )
            self.current_page += 1
            return

        await self.auto_class.autogenerate_wrapper(
            interaction,
            self.data.get("type"),
            self.data.get("method"),
            self.data.get("number"),
            self.data.get("_ids"),
            self.data.get("timeout"),
            self.data.get("channel"),
        )
        await interaction.followup.edit_message(content="Bets created", view=None, message_id=interaction.message.id)

    @staticmethod
    @discord.ui.button(
        label="Cancel",
        style=discord.ButtonStyle.red,
        row=4,
        disabled=False,
        custom_id="cancel_btn",
        emoji="✖️",
    )
    async def cancel_callback(_: discord.ui.Button, interaction: discord.Interaction) -> None:
        """Button callback.

        Args:
            _ (discord.ui.Button): the button pressed
            interaction (discord.Interaction): the callback interaction
        """
        await interaction.response.edit_message(content="Cancelled", view=None, delete_after=2)
