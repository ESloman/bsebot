"""
This is a file for Collection Classes in a MongoDB database.

A MongoDB database can have lots of Collections (basically tables). Each Collection should have a class here
that provides methods for interacting with that Collection.

This particular file contains Collection Classes for the 'bestsummereverpoints' DB.
"""

import random
from typing import Optional, Union

from mongo import interface
from mongo.db_classes import BestSummerEverPointsDB


class AutoGeneratedBets(BestSummerEverPointsDB):
    """
    Class for interacting with the 'autogeneratedbets' MongoDB collection in the 'bestsummereverpoints' DB
    """
    def __init__(self):
        """
        Constructor method that initialises the vault object
        """
        super().__init__()
        self._vault = interface.get_collection(self.database, "autogeneratedbets")

    def insert_generated_bet(self, scenario_type: str, title: str, options: list):
        """
        Insert a bet into the DB that we can pull out later.

        :param scenario_type:
        :param title:
        :param options:
        :return:
        """

        document = {
            "type": scenario_type,
            "title": title,
            "options": options
        }

        self.insert(document)

    def get_bets_for_type(self, scenario_type: str) -> list:
        """
        Gets ALL bets for a specified type

        :param scenario_type:
        :return:
        """
        rets = self.query({"type": scenario_type})
        return rets

    def get_random_bets_for_type(self, scenario_type: str, amount: int = 3) -> list:
        """
        Gets a random sample of bets for a specified type

        :param scenario_type:
        :param amount:
        :return:
        """
        rets = self.get_bets_for_type(scenario_type)
        return random.sample(rets, amount)


class SpoilerThreads(BestSummerEverPointsDB):
    """
    Class for interacting with the 'autogeneratedbets' MongoDB collection in the 'bestsummereverpoints' DB
    """
    def __init__(self):
        """
        Constructor method that initialises the vault object
        """
        super().__init__()
        self._vault = interface.get_collection(self.database, "spoilerthreads")

    def insert_spoiler_thread(
            self,
            guild_id: int,
            thread_id: int,
            name: str,
            new_episode_day: Optional[int] = None
    ) -> list:
        """
        Insert a bet into the DB that we can pull out later.

        :return:
        """

        document = {
            "guild_id": guild_id,
            "thread_id": thread_id,
            "name": name,
            "day": new_episode_day,
            "active": True
        }

        return self.insert(document)

    def get_thread_by_id(self, guild_id: int, thread_id: int) -> Union[None, dict]:
        """

        :param guild_id:
        :param thread_id:
        :return:
        """

        ret = self.query({"guild_id": guild_id, "thread_id": thread_id})
        if ret:
            return ret[0]
        return None
