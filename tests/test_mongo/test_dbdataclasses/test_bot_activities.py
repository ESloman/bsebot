"""Tests our AutoGeneratedBets class."""

from unittest import mock

import pytest

from mongo import interface
from mongo.bsedataclasses import BotActivities
from mongo.datatypes.botactivities import BotActivityDB
from tests.mocks import interface_mocks

ACTIVITY_CACHE: list[dict[str, any]] | None = None


def _get_activity_data() -> list[dict[str, any]]:
    """Function for getting and caching internal data."""
    global ACTIVITY_CACHE  # noqa: PLW0603
    if ACTIVITY_CACHE is None:
        ACTIVITY_CACHE = list(interface_mocks.query_mock("botactivities", {}))
    return ACTIVITY_CACHE


class TestBotActivities:
    """Tests our AutoGeneratedBets class."""

    def test_bot_activities_init(self) -> None:
        """Tests BotActivities init."""
        activities = BotActivities()
        assert isinstance(activities, BotActivities)

    def test_bot_activities_data_class(self) -> None:
        """Tests BotActivities make_data_class."""
        activities = BotActivities()
        data = _get_activity_data()
        for entry in data:
            cls = activities.make_data_class(entry)
            assert isinstance(cls, BotActivityDB)

    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "insert", new=interface_mocks.insert_mock)
    def test_bot_activities_insert(self) -> None:
        """Tests BotActivities insert_activity."""
        activities = BotActivities()
        inserted = activities.insert_activity("playing", "something", 123456)
        assert isinstance(inserted, BotActivityDB)

    @pytest.mark.parametrize(
        ("name", "category"), sorted({(entry["name"], entry["category"]) for entry in _get_activity_data()})
    )
    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "query", new=interface_mocks.query_mock)
    def test_bot_activities_find_activity(self, name: str, category: str) -> None:
        """Tests BotActivities find_activity."""
        activities = BotActivities()
        activity = activities.find_activity(name, category)
        assert isinstance(activity, BotActivityDB)
        assert activity.name == name
        assert activity.category == category

    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "query", new=interface_mocks.query_mock)
    def test_bot_activities_get_all_activities(self) -> None:
        """Tests BotActivities get_all_activities."""
        activities = BotActivities()
        found_activities = activities.get_all_activities()
        assert isinstance(found_activities, list)
        for entry in found_activities:
            assert isinstance(entry, BotActivityDB)
