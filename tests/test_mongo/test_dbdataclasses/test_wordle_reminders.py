"""Tests our AutoGeneratedBets class."""

from unittest import mock

from mongo import interface
from mongo.bsedataclasses import WordleReminders
from mongo.datatypes.wordle import WordleReminderDB
from tests.mocks import interface_mocks

WORDLE_REMINDER_CACHE: list[dict[str, any]] | None = None


def _get_wordle_reminder_data() -> list[dict[str, any]]:
    """Function for getting and caching internal data."""
    global WORDLE_REMINDER_CACHE  # noqa: PLW0603
    if WORDLE_REMINDER_CACHE is None:
        WORDLE_REMINDER_CACHE = list(interface_mocks.query_mock("wordlereminders", {}))
    return WORDLE_REMINDER_CACHE


class TestWordleReminders:
    """Tests our AutoGeneratedBets class."""

    def test_bot_activities_init(self) -> None:
        """Tests WordleReminders init."""
        reminders = WordleReminders()
        assert isinstance(reminders, WordleReminders)

    def test_bot_activities_data_class(self) -> None:
        """Tests WordleReminders make_data_class."""
        reminders = WordleReminders()
        data = _get_wordle_reminder_data()
        for entry in data:
            cls = reminders.make_data_class(entry)
            assert isinstance(cls, WordleReminderDB)

    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "insert", new=interface_mocks.insert_mock)
    def test_wordle_reminders_insert(self) -> None:
        """Tests WordleReminders insert_reminder."""
        reminders = WordleReminders()
        inserted = reminders.insert_reminder("name", 123456)
        assert isinstance(inserted, WordleReminderDB)

    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "query", new=interface_mocks.query_mock)
    def test_bot_activities_get_all_reminders(self) -> None:
        """Tests BotActivities get_all_activities."""
        reminders = WordleReminders()
        all_reminders = reminders.get_all_reminders()
        assert isinstance(all_reminders, list)
        for entry in all_reminders:
            assert isinstance(entry, WordleReminderDB)
