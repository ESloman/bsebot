"""Tests our AutoGeneratedBets class."""

import datetime
from unittest import mock

import pytest

from discordbot.wordle.data_type import WordleSolve
from mongo import interface
from mongo.bsedataclasses import WordleAttempts
from mongo.datatypes.wordle import WordleAttemptDB
from tests.mocks import interface_mocks

WORDLE_CACHE: list[dict[str, any]] | None = None


def _get_wordle_data(number: int | None = None) -> list[dict[str, any]]:
    """Function for getting and caching internal data."""
    global WORDLE_CACHE  # noqa: PLW0603
    if WORDLE_CACHE is None:
        WORDLE_CACHE = list(interface_mocks.query_mock("wordles", {}))
    if not number:
        return WORDLE_CACHE
    return WORDLE_CACHE[-number:]


class TestAutoGeneratedBets:
    """Tests our AutoGeneratedBets class."""

    def test_wordle_init(self) -> None:
        """Tests WordleAttempts init."""
        wordle = WordleAttempts()
        assert isinstance(wordle, WordleAttempts)

    def test_wordle_make_data_class(self) -> None:
        """Tests WordleAttempts make_data_class."""
        wordle = WordleAttempts()
        data = _get_wordle_data()
        for entry in data:
            cls = wordle.make_data_class(entry)
            assert isinstance(cls, WordleAttemptDB)

    @pytest.mark.parametrize("entry", [WordleAttempts.make_data_class(entry) for entry in _get_wordle_data(5)])
    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "insert", new=interface_mocks.insert_mock)
    def test_wordle_document_wordle(self, entry: WordleAttemptDB) -> None:
        """Tests WordleAttempts document_wordle."""
        wordle = WordleAttempts()
        solve = WordleSolve(
            entry.solved,
            entry.guesses,
            entry.starting_word,
            entry.guess_count,
            entry.actual_word,
            entry.game_state,
            datetime.datetime.strptime(entry.timestamp, "%Y-%m-%d"),
            entry.share_text,
            entry.wordle_num,
        )
        inserted = wordle.document_wordle(entry.guild_id, solve)
        assert isinstance(inserted, WordleAttemptDB)

    @pytest.mark.parametrize(
        ("timestamp", "guild_id"),
        sorted({(entry["timestamp"], entry["guild_id"]) for entry in _get_wordle_data()[:10]}),
    )
    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "query", new=interface_mocks.query_mock)
    def test_wordle_find_at_timestamp(self, timestamp: str, guild_id: int) -> None:
        """Tests WordleAttempts find_wordle_at_timestamp."""
        wordle = WordleAttempts()
        found = wordle.find_wordles_at_timestamp(datetime.datetime.strptime(timestamp, "%Y-%m-%d"), guild_id)
        assert isinstance(found, WordleAttemptDB)

    @mock.patch.object(interface, "get_collection", new=interface_mocks.get_collection_mock)
    @mock.patch.object(interface, "get_database", new=interface_mocks.get_database_mock)
    @mock.patch.object(interface, "query", new=interface_mocks.query_mock)
    def test_wordle_find_at_timestamp_none(self) -> None:
        """Tests WordleAttempts find_wordle_at_timestamp with an empty one."""
        wordle = WordleAttempts()
        found = wordle.find_wordles_at_timestamp(datetime.datetime.strptime("2021-01-01", "%Y-%m-%d"), 123456)
        assert found is None
